#!/usr/bin/python

import ROOT
import numpy
import random
import math
import os
import re


ROOT.gROOT.Reset()
ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(0)
ROOT.gROOT.Reset()
ROOT.gROOT.SetStyle("Plain")
ROOT.gStyle.SetOptStat(0)
ROOT.gStyle.SetOptFit(1111)
ROOT.gStyle.SetPadTopMargin(0.08)
ROOT.gStyle.SetPadLeftMargin(0.13)
ROOT.gStyle.SetPadRightMargin(0.26)
ROOT.gStyle.SetPadBottomMargin(0.15)
ROOT.gStyle.SetMarkerSize(0.16)
ROOT.gStyle.SetHistLineWidth(1)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetLabelSize(0.055, "XYZ")

ROOT.gStyle.SetOptFit()
ROOT.gStyle.SetOptStat(0)

# For the canvas:
ROOT.gStyle.SetCanvasBorderMode(0)
ROOT.gStyle.SetCanvasColor(ROOT.kWhite)
ROOT.gStyle.SetCanvasDefH(600) #Height of canvas
ROOT.gStyle.SetCanvasDefW(600) #Width of canvas
ROOT.gStyle.SetCanvasDefX(0)   #POsition on screen
ROOT.gStyle.SetCanvasDefY(0)

# For the Pad:
ROOT.gStyle.SetPadBorderMode(0)
# ROOT.gStyle.SetPadBorderSize(Width_t size = 1)
ROOT.gStyle.SetPadColor(ROOT.kWhite)
#ROOT.gStyle.SetPadGridX(True)
#ROOT.gStyle.SetPadGridY(True)
ROOT.gStyle.SetGridColor(ROOT.kBlack)
ROOT.gStyle.SetGridStyle(2)
ROOT.gStyle.SetGridWidth(1)

# For the frame:

ROOT.gStyle.SetFrameBorderMode(0)
ROOT.gStyle.SetFrameBorderSize(0)
ROOT.gStyle.SetFrameFillColor(0)
ROOT.gStyle.SetFrameFillStyle(0)
ROOT.gStyle.SetFrameLineColor(1)
ROOT.gStyle.SetFrameLineStyle(1)
ROOT.gStyle.SetFrameLineWidth(0)

# For the histo:
# ROOT.gStyle.SetHistFillColor(1)
# ROOT.gStyle.SetHistFillStyle(0)
ROOT.gStyle.SetHistLineColor(1)
ROOT.gStyle.SetHistLineStyle(0)
ROOT.gStyle.SetHistLineWidth(1)
# ROOT.gStyle.SetLegoInnerR(Float_t rad = 0.5)
# ROOT.gStyle.SetNumberContours(Int_t number = 20)

ROOT.gStyle.SetEndErrorSize(2)
#ROOT.gStyle.SetErrorMarker(20)
ROOT.gStyle.SetErrorX(0.)

ROOT.gStyle.SetMarkerStyle(20)
#ROOT.gStyle.SetMarkerStyle(20)

#For the fit/function:
ROOT.gStyle.SetOptFit(1)
ROOT.gStyle.SetFitFormat("5.4g")
ROOT.gStyle.SetFuncColor(2)
ROOT.gStyle.SetFuncStyle(1)
ROOT.gStyle.SetFuncWidth(1)

#For the date:
ROOT.gStyle.SetOptDate(0)
# ROOT.gStyle.SetDateX(Float_t x = 0.01)
# ROOT.gStyle.SetDateY(Float_t y = 0.01)

# For the statistics box:
ROOT.gStyle.SetOptFile(0)
ROOT.gStyle.SetOptStat(0) # To display the mean and RMS:   SetOptStat("mr")
ROOT.gStyle.SetStatColor(ROOT.kWhite)
ROOT.gStyle.SetStatFont(42)
ROOT.gStyle.SetStatFontSize(0.025)
ROOT.gStyle.SetStatTextColor(1)
ROOT.gStyle.SetStatFormat("6.4g")
ROOT.gStyle.SetStatBorderSize(1)
ROOT.gStyle.SetStatH(0.1)
ROOT.gStyle.SetStatW(0.15)

ROOT.gStyle.SetHatchesSpacing(0.5)
ROOT.gStyle.SetHatchesLineWidth(2)

# ROOT.gStyle.SetStaROOT.TStyle(Style_t style = 1001)
# ROOT.gStyle.SetStatX(Float_t x = 0)
# ROOT.gStyle.SetStatY(Float_t y = 0)


#ROOT.gROOT.ForceStyle(True)
#end modified

# For the Global title:

ROOT.gStyle.SetOptTitle(0)

# ROOT.gStyle.SetTitleH(0) # Set the height of the title box
# ROOT.gStyle.SetTitleW(0) # Set the width of the title box
#ROOT.gStyle.SetTitleX(0.35) # Set the position of the title box
#ROOT.gStyle.SetTitleY(0.986) # Set the position of the title box
# ROOT.gStyle.SetTitleStyle(Style_t style = 1001)
#ROOT.gStyle.SetTitleBorderSize(0)

# For the axis titles:
ROOT.gStyle.SetTitleColor(1, "XYZ")
ROOT.gStyle.SetTitleFont(43, "XYZ")
ROOT.gStyle.SetTitleSize(32, "XYZ")
# ROOT.gStyle.SetTitleXSize(Float_t size = 0.02) # Another way to set the size?
# ROOT.gStyle.SetTitleYSize(Float_t size = 0.02)
ROOT.gStyle.SetTitleXOffset(1.135)
#ROOT.gStyle.SetTitleYOffset(1.2)
ROOT.gStyle.SetTitleOffset(1.32, "YZ") # Another way to set the Offset

# For the axis labels:

ROOT.gStyle.SetLabelColor(1, "XYZ")
ROOT.gStyle.SetLabelFont(43, "XYZ")
ROOT.gStyle.SetLabelOffset(0.0077, "XYZ")
ROOT.gStyle.SetLabelSize(28, "XYZ")
#ROOT.gStyle.SetLabelSize(0.04, "XYZ")

# For the axis:

ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetAxisColor(1, "XYZ")
ROOT.gStyle.SetStripDecimals(True)
ROOT.gStyle.SetTickLength(0.03, "Y")
ROOT.gStyle.SetTickLength(0.05, "X")
ROOT.gStyle.SetNdivisions(505, "X")
ROOT.gStyle.SetNdivisions(512, "Y")

ROOT.gStyle.SetPadTickX(1)  # To get tick marks on the opposite side of the frame
ROOT.gStyle.SetPadTickY(1)

# Change for log plots:
ROOT.gStyle.SetOptLogx(0)
ROOT.gStyle.SetOptLogy(0)
ROOT.gStyle.SetOptLogz(0)

#ROOT.gStyle.SetPalette(1) #(1,0)

# another top group addition
ROOT.gStyle.SetHatchesSpacing(1.0)

# Postscript options:
#ROOT.gStyle.SetPaperSize(20., 20.)
#ROOT.gStyle.SetPaperSize(ROOT.TStyle.kA4)
#ROOT.gStyle.SetPaperSize(27., 29.7)
#ROOT.gStyle.SetPaperSize(27., 29.7)
ROOT.TGaxis.SetMaxDigits(3)
ROOT.gStyle.SetLineScalePS(2)

# ROOT.gStyle.SetLineStyleString(Int_t i, const char* text)
# ROOT.gStyle.SetHeaderPS(const char* header)
# ROOT.gStyle.SetTitlePS(const char* pstitle)
#ROOT.gStyle.SetColorModelPS(1)

# ROOT.gStyle.SetBarOffset(Float_t baroff = 0.5)
# ROOT.gStyle.SetBarWidth(Float_t barwidth = 0.5)
# ROOT.gStyle.SetPaintTextFormat(const char* format = "g")
# ROOT.gStyle.SetPalette(Int_t ncolors = 0, Int_t* colors = 0)
# ROOT.gStyle.SetTimeOffset(Double_t toffset)
# ROOT.gStyle.SetHistMinimumZero(kTRUE)
ROOT.gStyle.SetPalette(1)
ROOT.gStyle.SetPaintTextFormat("7.4f")



colors=[]
def newColor(red,green,blue):
    newColor.colorindex+=1
    color=ROOT.TColor(newColor.colorindex,red,green,blue)
    colors.append(color)
    return color
    
newColor.colorindex=301

def getDarkerColor(color):
    darkerColor=newColor(color.GetRed()*0.6,color.GetGreen()*0.6,color.GetBlue()*0.6)
    return darkerColor

sampleDict = {

    "tChannel":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kRed),
        "title":"t-channel",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "tWChannel":
    {
        "processes":[
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1",
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange),
        "title":"tW-channel",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "TTJets":
    {
        "processes":[
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange-3),
        "title":"t#bar{t}",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "WJetsAMC":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(aMC@NLO)",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*(1+0.8*(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1))"
    },
    
    "WJetsMG":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(MadGraph)",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*(1+0.8*(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1))"
    },
    
    
    "DY":
    {
        "processes":[
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"Drell-Yan",
        #"addtitle":"(#times 1.8)",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)*(1+0.8*(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1))"
    },

    "QCD":
    {
        "processes":[
            "QCD_Pt-20toInf_MuEnrichedPt15_TuneCUETP8M1_13TeV_pythia8",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGray),
        "title":"QCD (MC)",# #lower[-0.06]{#scale[0.85]{#times#frac{1}{5}}}",
        "weight":"((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "data1":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":"((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))"
    },
    
    "data2":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":"(Reconstructed_1__HLT_IsoMu20_v3==1)"
    }
}

rootFilesMC=[]
rootFilesData=[]

basedirMC = os.path.join(os.getcwd(),"evaluate25ns")
matchMC = re.compile("mc[0-9]+.root")
basedirData = os.path.join(os.getcwd(),"evaluate25nsData")
matchData = re.compile("data[0-9]+.root")

for f in os.listdir(basedirMC):
    if matchMC.match(f):
        rootFilesMC.append(os.path.join(basedirMC,f))

for f in os.listdir(basedirData):
    if matchData.match(f):
        rootFilesData.append(os.path.join(basedirData,f))
        
print "found MC=",len(rootFilesMC)," and data=",len(rootFilesData)," files"

def addUnderflowOverflow(hist):
    hist.SetBinContent(1,hist.GetBinContent(0)+hist.GetBinContent(1))
    N=hist.GetNbinsX()
    hist.SetBinContent(N,hist.GetBinContent(N)+hist.GetBinContent(N+1))
    hist.SetBinContent(0,0)
    hist.SetBinContent(N+1,0)
    hist.SetEntries(hist.GetEntries()-4)
        

for sample in sampleDict.keys():
    sampleDict[sample]["darkColor"]=getDarkerColor(sampleDict[sample]["color"])

globalDataWeight="1"
globalMCWeight="(Reconstructed_1__HLT_IsoMu20_v1==1)"


scanResults=[]


for category in [
    ["2j0t","(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==0)",ROOT.kAzure-5],
    ["2j1t","(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)",ROOT.kTeal+2],

    ["3j0t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==0)",ROOT.kOrange-3],
    ["3j1t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==1)",ROOT.kViolet-5],
    ["3j2t","(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)",ROOT.kOrange+10]
]:


    for qcd in [
        #["qcdnone","1","",1],
        ["qcdmtw","(SingleTop_1__mtw_beforePz>50.0)",", MTW>50",2],
        
    ]:
        
        print category[0],qcd[0]
        
        scanResult={"name":category[0]+qcd[2],"x":[],"chi2":[],"ks":[],"color":category[2],"style":qcd[3]}
        
        outputName=category[0]+qcd[0]
        variableName="Reconstructed_1__PU_1__nVertices"
        weight=category[1]+"*"+qcd[1]
        
        nbins=51
        xmin=-0.5
        xmax=50.0

        

        
        
        for minxsec in range(60,81):
            
            pu=[minxsec*1.0,"(Reconstructed_1__PU"+str(int(round(minxsec*1000)))+"_weight)"]
            #pu=[minxsec*1.0,"1.0"]            
            scanResult["x"].append(minxsec*1.0)
            
            sumHistMC = ROOT.TH1F("hist_bg"+str(random.random),"",nbins,xmin,xmax)
            sumHistMC.Sumw2()
            sumHistMC.SetDirectory(0)
            for sampleName in ["tChannel","tWChannel","TTJets","WJetsAMC","DY","QCD"]:
                sample=sampleDict[sampleName]
                for process in sample["processes"]:
                    for f in rootFilesMC:
                        rootFile = ROOT.TFile(f)
                        tree = rootFile.Get(process+"_iso")
                        if (tree):
                            tempHist=ROOT.TH1F(sumHistMC)
                            tempHist.SetName("hist_"+sampleName+str(random.random))
                            tree.Project(tempHist.GetName(),variableName,pu[1]+"*mc_weight*"+sample["weight"]+"*"+weight+"*"+globalMCWeight)
                            tempHist.SetDirectory(0)
                            addUnderflowOverflow(tempHist)
                            sumHistMC.Add(tempHist)
                        rootFile.Close()
                        #break
            sumHistMC.Scale(1.0/sumHistMC.Integral())
                        
            sumHistData = ROOT.TH1F("hist_sig"+str(random.random),"",nbins,xmin,xmax)
            sumHistData.Sumw2()
            sumHistData.SetDirectory(0)
            for sampleName in ["data1","data2"]:
                sample=sampleDict[sampleName]
                for process in sample["processes"]:
                    for f in rootFilesData:
                        rootFile = ROOT.TFile(f)
                        tree = rootFile.Get(process+"_iso")
                        if (tree):
                            tempHist=ROOT.TH1F(sumHistData)
                            tempHist.SetName("hist_"+sampleName+str(random.random))
                            tree.Project(tempHist.GetName(),variableName,sample["weight"]+"*"+weight+"*"+globalDataWeight)
                            tempHist.SetDirectory(0)
                            addUnderflowOverflow(tempHist)
                            sumHistData.Add(tempHist)
                        rootFile.Close()
                        #break
            sumHistData.Scale(1.0/sumHistData.Integral())
            
            chi2=sumHistMC.Chi2Test(sumHistData,"WW")
            ks=sumHistMC.KolmogorovTest(sumHistData)
            
            print pu[0],": chi2=",chi2,", ks=",ks
            scanResult["chi2"].append(chi2)
            scanResult["ks"].append(ks)
            
            '''
            cv = ROOT.TCanvas("cv_dist"+str(random.random()),"",800,600)
            sumHistMC.Draw()
            sumHistData.Draw("SAME")
            cv.Update()
            cv.WaitPrimitive()
            '''
        scanResults.append(scanResult)
            
        #break
    #break
        

cv = ROOT.TCanvas("cv_dist"+str(random.random()),"",800,600)
cv.SetPad(0.0, 0.0, 1.0, 1.0)
cv.SetFillStyle(4000)

cv.SetBorderMode(0)
cv.SetGridx(True)
cv.SetGridy(True)

#For the frame:
cv.SetFrameBorderMode(0)
cv.SetFrameBorderSize(1)
cv.SetFrameFillColor(0)
cv.SetFrameFillStyle(0)
cv.SetFrameLineColor(1)
cv.SetFrameLineStyle(1)
cv.SetFrameLineWidth(1)

# Margins:
cv.SetLeftMargin(0.140)
cv.SetRightMargin(0.155)
cv.SetTopMargin(0.08)
cv.SetBottomMargin(0.13)

# For the Global title:
cv.SetTitle("")

# For the axis:
cv.SetTickx(1)  # To get tick marks on the opposite side of the frame
cv.SetTicky(1)

cv.SetLogy(1)

axis=ROOT.TH2F("axis"+str(random.random()),";min. bias #sigma / mb;KS-test (# vertices)",50,60,80,50,0.0000001,10)
axis.GetYaxis().SetNdivisions(508)
axis.GetXaxis().SetNdivisions(508)
axis.GetXaxis().SetTickLength(0.015/(1-cv.GetLeftMargin()-cv.GetRightMargin()))
axis.GetYaxis().SetTickLength(0.015/(1-cv.GetTopMargin()-cv.GetBottomMargin()))
#axis.GetYaxis().SetNoExponent(True)
axis.Draw("AXIS")


legend = ROOT.TLegend(0.86,0.9,0.99,0.9-0.075*len(scanResults))
legend.SetFillColor(ROOT.kWhite)
legend.SetBorderSize(0)
legend.SetTextFont(43)
legend.SetTextSize(28)
        
#### draw here

rootObj=[]
for scanResult in scanResults:
    graphChi2 = ROOT.TGraph(len(scanResult["x"]),numpy.array(scanResult["x"]),numpy.array(scanResult["ks"]))
    rootObj.append(graphChi2)
    graphChi2.SetMarkerStyle(20)
    graphChi2.SetMarkerSize(1.0)
    graphChi2.SetLineColor(scanResult["color"])
    graphChi2.SetLineWidth(2)
    #graphChi2.SetLineStyle(scanResult["style"])
    graphChi2.SetMarkerColor(scanResult["color"])
    graphChi2.Draw("LPSame")
    
    legend.AddEntry(graphChi2,scanResult["name"],"LP")

ROOT.gPad.RedrawAxis()


pCMS=ROOT.TPaveText(0.13+0.025,0.85,0.13+0.025,0.85,"NDC")
pCMS.SetFillColor(ROOT.kWhite)
pCMS.SetBorderSize(0)
pCMS.SetTextFont(63)
pCMS.SetTextSize(30)
pCMS.SetTextAlign(11)
pCMS.AddText("CMS")
pCMS.Draw("Same")

pPreliminary=ROOT.TPaveText(0.13+0.115,0.85,0.13+0.115,0.85,"NDC")
pPreliminary.SetFillColor(ROOT.kWhite)
pPreliminary.SetBorderSize(0)
pPreliminary.SetTextFont(53)
pPreliminary.SetTextSize(30)
pPreliminary.SetTextAlign(11)
pPreliminary.AddText("Preliminary")
pPreliminary.Draw("Same")

pLumi=ROOT.TPaveText(0.86,0.94,0.8,0.94,"NDC")
pLumi.SetFillColor(ROOT.kWhite)
pLumi.SetBorderSize(0)
pLumi.SetTextFont(43)
pLumi.SetTextSize(30)
pLumi.SetTextAlign(31)
pLumi.AddText("1.55#kern[-0.5]{ }fb#lower[-0.7]{#scale[0.7]{-1}} (13TeV)")
pLumi.Draw("Same")

legend.Draw("Same")

cv.Update()
cv.Print("scanPu_qcdmtw.pdf")
cv.Print("scanPu_qcdmtw.png")
cv.WaitPrimitive()




