from ModelClasses import *
from optparse import OptionParser
import math
import sys
import os
import logging
import copy
import random
import re
import ROOT

ROOT.gROOT.SetStyle("Plain")
ROOT.gStyle.SetOptStat(0)

def getHist(fileName,processName,variableName,weight,hist):
    hist.SetDirectory(0)
    rootFile = ROOT.TFile(f)
    tree = rootFile.Get(processName)
    tempHist=hist.Clone()
    tempHist.SetName("hist_"+processName+str(random.random()))
    if (tree):
        tree.Project(tempHist.GetName(),variableName,weight)
    tempHist.SetDirectory(0)
    hist.Add(tempHist)
    rootFile.Close()
    
globalWeight="1"
globalMCWeight=globalWeight+"*(Reconstructed_1__HLT_IsoMu20_v1==1)*(Reconstructed_1__PU69000_weight)*1640.217/0.7*mc_weight"
globalDataWeight=globalWeight+"*1"

sampleDict = {
    "tChannel":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kRed),
        "title":"t-channel",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "tWChannel":
    {
        "processes":[
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_iso",
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_iso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange),
        "title":"tW-channel",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "TTJets":
    {
        "processes":[
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext_iso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kOrange-3),
        "title":"t#bar{t}",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "WJetsAMC":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_iso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(aMC@NLO)",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "WJetsMG":
    {
        "processes":[
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_iso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGreen-2),
        "title":"W+jets",
        "addtitle":"(MadGraph)",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    
    "DY":
    {
        "processes":[
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_iso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"Drell-Yan",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },

    "QCD":
    {
        "processes":[
            "QCD_Pt-20toInf_MuEnrichedPt15_TuneCUETP8M1_13TeV_pythia8_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kGray),
        "title":"QCD (MC)",# #lower[-0.06]{#scale[0.85]{#times#frac{1}{5}}}",
        "weight":globalMCWeight+"*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    
    
    

    "MC_antiiso":
    {
        "processes":[
            "ST_t-channel_4f_leptonDecays_13TeV-amcatnlo-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_top_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "ST_tW_antitop_5f_inclusiveDecays_13TeV-powheg-pythia8_TuneCUETP8M1_antiiso",
            "TT_TuneCUETP8M1_13TeV-powheg-pythia8_ext_antiiso",
            #"WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso",
            "WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8_antiiso",
            "DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8_antiiso"
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlue-1),
        "title":"QCD (DD)",
        "weight":globalMCWeight+"*(-1.0)*((Generated_1__genweight<0)*(-1)+(Generated_1__genweight>0)*1)"
    },
    
    "data1_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1_antiiso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":"((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))"
    },
    
    "data2_antiiso":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4_antiiso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":"(Reconstructed_1__HLT_IsoMu20_v3==1)"
    },
    
    
    
    
    
    
    
    
    
    "data1":
    {
        "processes":[
            "SingleMuon_Run2015D-05Oct2015-v1_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*((Reconstructed_1__HLT_IsoMu20_v2==1)+(Reconstructed_1__HLT_IsoMu20_v3==1))"
    },
    
    "data2":
    {
        "processes":[
            "SingleMuon_Run2015D-PromptReco-v4_iso",
        ],
        "color":ROOT.gROOT.GetColor(ROOT.kBlack),
        "title":"Data",
        "weight":globalDataWeight+"*(Reconstructed_1__HLT_IsoMu20_v3==1)"
    }
}

rootFiles=[]

basedirMC = os.path.join(os.getcwd(),"evaluate25ns")
matchMC = re.compile("mc[0-9]+.root")
basedirData = os.path.join(os.getcwd(),"evaluate25nsData")
matchData = re.compile("data[0-9]+.root")

for f in os.listdir(basedirMC):
    if matchMC.match(f):
        rootFiles.append(os.path.join(basedirMC,f))

for f in os.listdir(basedirData):
    if matchData.match(f):
        rootFiles.append(os.path.join(basedirData,f))
        
print "found ",len(rootFiles)," files"


uncertainties = {
    "other":{"type":"gauss","config":{"mean": "1.0", "width":"1.0", "range":"(0.0,\"inf\")"}},
    #"topbg":{"type":"gauss","config":{"mean": "1.0", "width":"2.0", "range":"(0.0,\"inf\")"}},
    #"tChan":{"type":"gauss","config":{"mean": "1.0", "width":"0.00001", "range":"(0.0,\"inf\")"}},
    "qcd":{"type":"gauss","config":{"mean": "1.0", "width":"1.0", "range":"(0.0,\"inf\")"}},
    #"lumi":{"type":"gauss","config":{"mean": "1.0", "width":"0.1", "range":"(0.0,\"inf\")"}}
}

observables = {
    "2j1t": {
        #"weight":"1",
        "weight":"(Reconstructed_1__nSelectedJet==2)*(Reconstructed_1__nSelectedBJet==1)"
    },
    #"3j2t": {
    #    #"weight":"1",
    #    "weight":"(Reconstructed_1__nSelectedJet==3)*(Reconstructed_1__nSelectedBJet==2)"
    #},
}

binning=20
ranges=[0.0,200.0]
file=open("fit.cfg","w")
varName="SingleTop_1__mtw_beforePz"

'''
components={
    "other":
    {
        "sets":["WJetsAMC","DY"],
        "uncertainties":["other"],
        "weight":"1",
        "color":ROOT.kGreen+1,
    },
    "topbg":
    {
        "sets":["tWChannel","TTJets"],
        "uncertainties":["topbg"],
        "weight":"1",
        "color":ROOT.kOrange,
    },
    "tChan":
    {
        "sets":["tChannel"],
        "uncertainties":["tChan"],
        "weight":"1",
        "color":ROOT.kMagenta,
    },
    "QCD":
    {
        "sets":["QCD"],
        "uncertainties":["qcd"],
        "weight":"1",
        "color":ROOT.kGray+1,
    }
}
'''

components={
    "other":
    {
        "sets":["WJetsMG","DY","tWChannel","TTJets","tChannel"],
        "uncertainties":["other"],
        "weight":"1",
        "color":ROOT.kGreen+1
    },
    
    #"QCD":
    #{
    #    "sets":["QCD"],
    #    "uncertainties":["qcd"],
    #    "weight":"1",
    #    "color":ROOT.kGray+1
    #}
    
    "QCD":
    {
        "sets":["data1_antiiso","data2_antiiso","MC_antiiso"],
        "uncertainties":["qcd"],
        "weight":"1",
        "color":ROOT.kGray+1
    }
}

data = {
    "data":
    {
        "sets":["data1","data2"],
        "weight":"1"
    }
}


histograms={}

model=Model("fit", {"bb_uncertainties":"true"})

for uncertaintyName in uncertainties.keys():
    uncertainties[uncertaintyName]["dist"]=Distribution(uncertaintyName, uncertainties[uncertaintyName]["type"], uncertainties[uncertaintyName]["config"])
    file.write(uncertainties[uncertaintyName]["dist"].toConfigString())
    

        
for observableName in observables.keys():
    observable = Observable(observableName, binning, ranges)
    observableWeight = observables[observableName]["weight"]
    
    histograms[observableName]={}
    
    for componentName in components.keys():
        componentWeight = components[componentName]["weight"]
        componentUncertainties = components[componentName]["uncertainties"]
        
        componentHist = ROOT.TH1F("hist_"+observableName+"_"+componentName+"_"+str(random.random()),";"+varName+";Events",binning,ranges[0],ranges[1])
        componentHist.Sumw2()
        componentHist.SetFillColor(components[componentName]["color"])
        componentHist.SetLineColor(components[componentName]["color"])
        histograms[observableName][componentName] = componentHist
        
        for componentSetName in components[componentName]["sets"]:
            for processName in sampleDict[componentSetName]["processes"]:
                processWeight = sampleDict[componentSetName]["weight"]
                
                for i,f in enumerate(rootFiles):
                    rootFile = ROOT.TFile(f)
                    tree = rootFile.Get(processName)
                    if (tree):
                        component=ObservableComponent(observableName+"__"+componentName+"__"+componentSetName+"__"+processName+"__"+str(i))
                        coeff=CoefficientMultiplyFunction()
                        for uncertaintyName in componentUncertainties:
                            coeff.addDistribution(uncertainties[uncertaintyName]["dist"],uncertainties[uncertaintyName]["dist"].getParameterName())
                        component.setCoefficientFunction(coeff)
                        
                        hist=RootProjectedHistogram(observableName+"__"+componentName+"__"+componentSetName+"__"+processName+"__"+str(i),{"use_errors":"true"})
                        hist.setFileName(f)
                        hist.setVariableString(varName)
                        hist.setWeightString(observableWeight+"*"+componentWeight+"*"+processWeight)
                        hist.setTreeName(processName)
                        hist.setBinning(binning)
                        hist.setRange(ranges)
                        file.write(hist.toConfigString())
                        component.setNominalHistogram(hist)
                        
                        observable.addComponent(component)
                        
                        getHist(f,processName,varName,observableWeight+"*"+componentWeight+"*"+processWeight,componentHist)
                        
                    rootFile.Close()
                
            

    model.addObservable(observable)



    histoadd = HistoAdd(observableName+"__data")
        
    for componentName in data.keys():
        componentWeight=data[componentName]["weight"]
        
        componentHist = ROOT.TH1F("hist_"+observableName+"_"+componentName+"_"+str(random.random()),";"+varName+";Events",binning,ranges[0],ranges[1])
        componentHist.Sumw2()
        componentHist.SetMarkerStyle(20)
        componentHist.SetMarkerSize(0.8)
        histograms[observableName][componentName] = componentHist
        
        for componentSetName in data[componentName]["sets"]:
            for processName in sampleDict[componentSetName]["processes"]:
                processWeight = sampleDict[componentSetName]["weight"]
                
                for i,f in enumerate(rootFiles):
                    rootFile = ROOT.TFile(f)
                    tree = rootFile.Get(processName)
                    if (tree):
                        hist=RootProjectedHistogram(observableName+"__"+componentName+"__"+componentSetName+"__"+processName+"__"+str(i),{"use_errors":"true"})
                        hist.setFileName(f)
                        hist.setVariableString(varName)
                        hist.setWeightString(observableWeight+"*"+componentWeight+"*"+processWeight)
                        hist.setTreeName(processName)
                        hist.setBinning(binning)
                        hist.setRange(ranges)
                        file.write(hist.toConfigString())
                        histoadd.addHisto(hist.getVarname())
                        
                        getHist(f,processName,varName,observableWeight+"*"+componentWeight+"*"+processWeight,componentHist)

                    rootFile.Close()
    
    file.write(histoadd.toConfigString())

                    
file.write(model.toConfigString())

file.write("\n")
file.write("\n")

file.write("myminimizer = {\n")

file.write("type = \"newton_minimizer\";\n")
file.write("//par_eps = 1e-6; // optional; default is 1e-4'\n")
file.write("//maxit = 100000; // optional; default is 10,000'\n")
file.write("//improve_cov = true; // optional; default is false'\n")
file.write("//force_cov_positive = true; // optional, default is false'\n")
file.write("//step_cov = 0.01; // optional; default is 0.1'\n")
'''
file.write("type = \"root_minuit\";\n")
file.write("method = \"migrad\"; //optional. Default is 'migrad'\n")
file.write("tolerance_factor = 0.1; //optional. Default is 1\n")
file.write("max_iterations = 10000; // optional. Default as in ROOT::Minuit2\n")
file.write("max_function_calls = 100000; //optional. Default as in ROOT::Minuit2\n")
file.write("n_retries = 20; // optional; the default is 2\n")

file.write("type = \"mcmc_minimizer\";\n")
file.write("name = \"min0\";\n")
file.write("iterations = 10000;\n")
file.write("burn-in = 500; //optional. default is iterations / 10\n")
file.write("stepsize_factor = 0.1; //optional, default is 1.0\n")
'''
file.write("};\n")

file.write('pd = {\n')
file.write('    name= "fit";\n')
file.write('    type = "mle";\n')
file.write('    parameters = ('+model.getParameterNames()+');\n')
file.write('    minimizer = \"@myminimizer\";\n')
file.write('    write_covariance = true;\n')
file.write('};\n')

file.write('main={\n')

file.write('    data_source={\n')
file.write('        type="histo_source";\n')
file.write('        name="data";\n')

file.write('        obs_2j1t="@histoadd_2j1t__data";\n')
#file.write('        obs_2j0t="@histoadd_2j0t__data";\n')
#file.write('        obs_3j1t="@histoadd_3j1t__data";\n')
#file.write('        obs_3j2t="@histoadd_3j2t__data";\n')
file.write('    };\n')

'''
file.write('    data_source={\n')
file.write('    type="model_source";\n')
file.write('    model="@model_'+modelName+'";\n')
file.write('    name="source";\n')
if dicePoisson:
    file.write('    dice_poisson=true;\n')
else:
    file.write('    dice_poisson=false;\n')
if mcUncertainty:    
    file.write('    dice_template_uncertainties = true;\n')
else:
    file.write('    dice_template_uncertainties = false;\n')
file.write('    rnd_gen={\n')
file.write('         seed=126;//default of-1 means: use current time.\n')
file.write('      };\n')
file.write('    };\n')
'''


file.write('    n-events=1;\n')
file.write('    model="@'+model.getVarname()+'";\n')
file.write('    output_database={\n')
file.write('        type="rootfile_database";\n')
file.write('        filename="'+os.path.join(model.getName()+'.root')+'";\n')
file.write('    };\n')
file.write('    producers=("@pd"\n')
file.write('    );\n')
file.write('};\n')

file.write('options = {\n')
file.write('    plugin_files = ("$THETA_DIR/lib/root.so", "$THETA_DIR/lib/core-plugins.so");\n')
file.write('};\n')
    
file.close()


for observableName in observables.keys():
    cv = ROOT.TCanvas("cv_"+observableName+"_"+str(random.random()),"",800,600)
    stack = ROOT.THStack()
    for mcComponentName in components.keys():
        stack.Add(histograms[observableName][mcComponentName])
    stack.Draw("HISTF")
    
    histograms[observableName]["data"].Draw("SAMEPE")
    
    cv.Update()
    cv.WaitPrimitive()
    
        

